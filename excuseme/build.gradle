apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        debug {
            testCoverageEnabled false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    jacoco {
        version = '0.8.4'
    }

    testOptions {
        unitTests.all {
            jacoco {
                version = '0.8.4'
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.71"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3'
    testImplementation 'junit:junit:4.12'
    testImplementation 'androidx.test:runner:1.2.0'
    testImplementation 'androidx.test:rules:1.2.0'
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'org.robolectric:robolectric:4.3.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    testImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}


task jacocoTestReport(type: JacocoReport, dependsOn: ['generateDebugSources', 'compileDebugSources', 'createMockableJar', 'compileDebugUnitTestSources', 'testDebugUnitTest']) {

    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
    classDirectories = fileTree(
            dir: 'build/intermediates/classes/staging/debug/com/araujo/jordan/excuseme',
            excludes: [
                    '**/databinding/**/*.*',
                    '**/android/databinding/*Binding.*',
                    '**/BR.*',
                    '**/R.*',
                    '**/R$*.*',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*_MembersInjector.*',
                    '**/Dagger*Component.*',
                    '**/Dagger*Component$Builder.*',
                    '**/*Module_*Factory.*',
                    '**/*Fragment*.*',
                    '**/*Activity*.*',
                    '**/*Adapter*.*',
                    '**/*ViewPager*.*',
                    '**/*ViewHolder*.*',
                    '**/*Module*.*',
                    'jdk.internal.*',
                    '**/*jdk.internal.*'
            ]
    )

    sourceDirectories = files('src/main/java/com/araujo/jordan/excuseme')
    executionData = files('build/jacoco/testStagingDebugUnitTest.exec')

}

task getCoverage(type: Exec, dependsOn: 'codeCoverageReport') {
    group = "Reporting"
    commandLine "open", "$buildDir/reports/jacoco/codeCoverageReport/html/index.html"
}
